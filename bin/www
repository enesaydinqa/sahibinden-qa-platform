#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('website:server');
var http = require('http');

var log4js = require("log4js");
var logger = log4js.getLogger();
logger.level = "debug";

const WebSocketServer = require('websocket').server;
const { NodeSSH } = require('node-ssh')

const ssh = new NodeSSH()
var sshConnect;

/**
 * Get port from environment and store in Express.
 */

var PORT = normalizePort(process.env.PORT || '3060');
app.set('port', PORT);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Websocketd
 */

const wsServer = new WebSocketServer({
    httpServer: server
});

wsServer.on('request', async function(request) {
    const connection = request.accept(null, request.origin);

    connection.on('message', async function(message) {

        if (message.utf8Data !== "ping" && Â message.utf8Data !== "false") {

            if (sshConnect == null) {
                logger.info("SSH connection has been made ...")

                const data = JSON.parse(message.utf8Data);
                logger.info("Machine : " + data.machineId);

                switch (data.machineId) {
                    case "212":
                        sshConnect = ssh.connect({
                            host: '10.1.11.212',
                            username: 'macmini4',
                            password: '1234'
                        })
                        break;
                    case "184":
                        sshConnect = ssh.connect({
                            host: '10.1.11.184',
                            username: 'macmini5',
                            password: '1234'
                        })
                        break;
                    case "207":
                        sshConnect = ssh.connect({
                            host: '10.1.11.207',
                            username: 'test',
                            password: '1'
                        })
                        break;
                    default:
                        console.log("undefined machine")
                }
            }

            sshConnect.then(function() {
                const data = JSON.parse(message.utf8Data);
                send(data.deviceUID);
            });
        } else {
            logger.warn("ping ...")
        }
    });

    connection.on('close', function(reasonCode, description) {
        sshConnect = null;
        logger.warn('Client has disconnected - SERVER');
    });

    async function send(uid) {
        if (connection.connected == true) {

            var device = "idevicescreenshot -u {0} {1}.png".format(uid, uid);
            var base64 = "cat {0}.png | base64".format(uid);

            logger.info(device)
            logger.info(base64)

            if (sshConnect !== null && connection.connected == true) {
                await ssh.execCommand(device, { cwd: '/opt/screenshots' });
                logger.info("screenshot taken for device : " + uid)

                ssh.execCommand(base64, { cwd: '/opt/screenshots' }).then(function(result) {

                    if (connection.connected == true) {
                        connection.send(JSON.stringify([uid, result.stdout]));
                        logger.info("send base64 : " + uid)
                    } else {
                        logger.warn("connected : " + connection.connected);
                        logger.warn("The operation could not be performed because the websocket was closed.")
                    }
                });
            } else {
                logger.warn("The ssh connection or websocket was unexpectedly closed.")
            }
        }
    }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof PORT === 'string' ?
        'Pipe ' + PORT :
        'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Utils
 */
String.prototype.format = function() {
    a = this;
    for (k in arguments) {
        a = a.replace("{" + k + "}", arguments[k])
    }
    return a
}