#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('website:server');
var http = require('http');

const WebSocketServer = require('websocket').server;
const { NodeSSH } = require('node-ssh')
const ssh = new NodeSSH()

var db_query_execute = require('../dbconnection');


/**
 * Get port from environment and store in Express.
 */

var PORT = normalizePort(process.env.PORT || '3060');
app.set('port', PORT);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Websocketd
 */

const wsServer = new WebSocketServer({
    httpServer: server
});

wsServer.on('request', async function(request) {
    const connection = request.accept(null, request.origin);

    connection.on('message', async function(message) {

        if (message.utf8Data == "true") {
            var isContinue = true;

            ssh.connect({
                host: '10.1.11.212',
                username: 'macmini4',
                password: '1234'
            }).then(async function() {
                for (loop = 0; loop < 999999; loop++) {

                    if (isContinue == false) {
                        break;
                    }

                    var devices = [
                        "00008030-0018306102E0402E",
                        "00008030-0002199E0ED3802E",
                        "00008030-000451410E87802E",
                        "00008030-0009149C02E0402E",
                        "c41e0c25fe4c0ce0ef28cf8d4862e08ce5ac46c9",
                        "0d123e38d24c6df3d198b576fd6f7396ed46978a",
                        "12b0530d88260b3211a4f360ea42c8c945ddeae4"
                    ];

                    for (i = 0; i < devices.length; i++) {

                        if (connection.connected == false) {
                            isContinue = false;
                            break;
                        }

                        if (connection.connected == true) {

                            var deviceId = devices[i];
                            var device = "idevicescreenshot -u " + deviceId + " " + deviceId + ".png";
                            var base64 = "cat " + deviceId + ".png | base64";

                            console.log(deviceId)
                            console.log(device)
                            console.log(base64)



                            await ssh.execCommand(device, { cwd: '/Users/macmini4/Desktop' });
                            await ssh.execCommand(base64, { cwd: '/Users/macmini4/Desktop' }).then(async function(result) {

                                console.log("connected : " + connection.connected);

                                if (connection.connected == true) {

                                    let sql = 'UPDATE phones SET base64 = ? WHERE uid = ?'
                                    let data = [result.stdout, deviceId];

                                    db_query_execute(sql, data, function(err, rows) {
                                        console.log("base64 db added ...")
                                        connection.send(JSON.stringify([deviceId]));
                                    });
                                }
                            });
                        }
                    }
                }
            });
        } else {
            console.log("client => ping")
        }
    });

    connection.on('close', function(reasonCode, description) {
        console.log('Client has disconnected - SERVER');
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof PORT === 'string' ?
        'Pipe ' + PORT :
        'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}