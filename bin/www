#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('website:server');
var http = require('http');
var nrc = require('node-run-cmd');
const imageToBase64 = require('image-to-base64');

const WebSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var PORT = normalizePort(process.env.PORT || '8080');
var HOST = '0.0.0.0';
app.set('port', PORT);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT, HOST);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Websocketd
 */

const wsServer = new WebSocketServer({
    httpServer: server
});

async function wait(ms) {
    return new Promise((resolve, reject) => {
        setTimeout(resolve, ms)
    });
}

wsServer.on('request', function(request) {
    const connection = request.accept(null, request.origin);

    connection.on('message', async function(message) {
        console.log('Received Message:', message.utf8Data);

        for (i = 0; i < 9999999; i++) {

            var promise = nrc.run('idevicescreenshot -u 65a2d58368b2a0ef55423a8e88f66db28b2851d2 phones/65a2d58368b2a0ef55423a8e88f66db28b2851d2.png');

            promise.then(function() { imageToBase64("phones/65a2d58368b2a0ef55423a8e88f66db28b2851d2.png").then((response) => { connection.send(response) }) }, function() { console.log("error") });

            await wait(300);
        }
    });

    connection.on('close', function(reasonCode, description) {
        console.log('Client has disconnected.');
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof PORT === 'string' ?
        'Pipe ' + PORT :
        'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}